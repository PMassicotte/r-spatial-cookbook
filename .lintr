linters: linters_with_defaults(
  T_and_F_symbol_linter(),
  absolute_path_linter(lax = TRUE),
  any_duplicated_linter(),
  any_is_na_linter(),
  backport_linter(),
  boolean_arithmetic_linter(),
  class_equals_linter(),
  commented_code_linter(),
  condition_message_linter(),
  conjunct_test_linter(),
  consecutive_assertion_linter(),
  cyclocomp_linter(),
  cyclocomp_linter(50),
  duplicate_argument_linter(),
  empty_assignment_linter(),
  expect_comparison_linter(),
  expect_length_linter(),
  expect_named_linter(),
  expect_not_linter(),
  expect_null_linter(),
  expect_s3_class_linter(),
  expect_s4_class_linter(),
  expect_true_false_linter(),
  expect_type_linter(),
  extraction_operator_linter(),
  fixed_regex_linter(),
  for_loop_index_linter(),
  function_argument_linter(),
  function_return_linter(),
  ifelse_censor_linter(),
  implicit_assignment_linter(),
  implicit_integer_linter(allow_colon = TRUE),
  inner_combine_linter(),
  is_numeric_linter(),
  length_levels_linter(),
  lengths_linter(),
  library_call_linter(),
  line_length_linter(80),
  literal_coercion_linter(),
  missing_argument_linter(),
  missing_package_linter(),
  nested_ifelse_linter(),
  nonportable_path_linter(),
  nonportable_path_linter(lax = TRUE),
  numeric_leading_zero_linter(),
  object_length_linter = NULL,
  object_name_linter = NULL,
  object_usage_linter = NULL,
  outer_negation_linter(),
  package_hooks_linter(),
  paste_linter(),
  pipe_call_linter(),
  redundant_equals_linter(),
  redundant_ifelse_linter(),
  regex_subset_linter(),
  routine_registration_linter(),
  scalar_in_linter(),
  semicolon_linter(allow_compound = TRUE),
  seq_linter(),
  sort_linter(),
  sprintf_linter(),
  string_boundary_linter(),
  strings_as_factors_linter(),
  system_file_linter(),
  undesirable_function_linter(all_undesirable_functions),
  undesirable_operator_linter(all_undesirable_operators),
  unnecessary_concatenation_linter(),
  unnecessary_lambda_linter(),
  unnecessary_nested_if_linter(),
  unnecessary_placeholder_linter(),
  unreachable_code_linter(),
  vector_logic_linter(),
  yoda_test_linter(),
  undesirable_function_linter(
    fun = c(
      # Base messaging
      "message" = "use cli::cli_inform()",
      "warning" = "use cli::cli_warn()",
      "stop" = "use cli::cli_abort()",
      # rlang messaging
      "inform" = "use cli::cli_inform()",
      "warn" = "use cli::cli_warn()",
      "abort" = "use cli::cli_abort()",
      # older cli
      "cli_alert_danger" = "use cli::cli_inform()",
      "cli_alert_info" = "use cli::cli_inform()",
      "cli_alert_success" = "use cli::cli_inform()",
      "cli_alert_warning" = "use cli::cli_inform()",
      # fs
      "file.path" = "use path()",
      "dir" = "use dir_ls()",
      "dir.create" = "use dir_create()",
      "file.copy" = "use file_copy()",
      "file.create" = "use file_create()",
      "file.exists" = "use file_exists()",
      "file.info" = "use file_info()",
      "normalizePath" = "use path_real()",
      "unlink" = "use file_delete()",
      "basename" = "use path_file()",
      "dirname" = "use path_dir()",
      # i/o
      "readLines" = "use read_lines()",
      "writeLines" = "use write_lines()"
    ),
    symbol_is_undesirable = FALSE
  )
  )

