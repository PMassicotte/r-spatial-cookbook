{
  "hash": "1c8c8f9641d841148ea8aa8224ce00a7",
  "result": {
    "engine": "knitr",
    "markdown": "# Spatial databases\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Create a connection to DuckDB\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\nlibrary(duckdb)\nlibrary(sf)\nlibrary(dplyr)\n\nconn <- dbConnect(duckdb())\n```\n:::\n\n\n\n\n\n## File Path and Database Setup\n\nHere, the code retrieves the file path of a sample GeoPackage file included with the `sf` package. It also installs and loads the necessary extensions (`httpfs` and `spatial`) in DuckDB to handle spatial data.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile <- system.file(\"gpkg/nc.gpkg\", package = \"sf\")\n\ndbExecute(conn, \"INSTALL httpfs; LOAD httpfs; INSTALL spatial; LOAD spatial\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\n\n\n## Creating a Table with Spatial Data\n\nThis section constructs a SQL query to create a table (`mytable`) from the GeoPackage file. It reads the spatial data and converts the geometry column to Well-Known Binary (WKB) format. The query is then executed with the file path bound as a parameter.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery <-\n  \"\n    CREATE OR REPLACE TABLE mytable AS\n    SELECT\n      *,\n      ST_asWKB (geom) AS geom2\n    FROM\n     ST_Read (?)\n  \"\n\nstmt <- dbSendStatement(conn, query, params = list(file))\ndbGetRowsAffected(stmt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 100\n```\n\n\n:::\n\n```{.r .cell-code}\ndbClearResult(stmt)\n```\n:::\n\n\n\n\n\n## Describing the Table\n\nThis part describes the structure of the newly created table and lists all tables in the database.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbSendQuery(conn, \"DESCRIBE mytable;\") |>\n  dbFetch()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|column_name |column_type |null |key |default |extra |\n|:-----------|:-----------|:----|:---|:-------|:-----|\n|AREA        |DOUBLE      |YES  |NA  |NA      |NA    |\n|PERIMETER   |DOUBLE      |YES  |NA  |NA      |NA    |\n|CNTY_       |DOUBLE      |YES  |NA  |NA      |NA    |\n|CNTY_ID     |DOUBLE      |YES  |NA  |NA      |NA    |\n|NAME        |VARCHAR     |YES  |NA  |NA      |NA    |\n|FIPS        |VARCHAR     |YES  |NA  |NA      |NA    |\n|FIPSNO      |DOUBLE      |YES  |NA  |NA      |NA    |\n|CRESS_ID    |INTEGER     |YES  |NA  |NA      |NA    |\n|BIR74       |DOUBLE      |YES  |NA  |NA      |NA    |\n|SID74       |DOUBLE      |YES  |NA  |NA      |NA    |\n|NWBIR74     |DOUBLE      |YES  |NA  |NA      |NA    |\n|BIR79       |DOUBLE      |YES  |NA  |NA      |NA    |\n|SID79       |DOUBLE      |YES  |NA  |NA      |NA    |\n|NWBIR79     |DOUBLE      |YES  |NA  |NA      |NA    |\n|geom        |GEOMETRY    |YES  |NA  |NA      |NA    |\n|geom2       |WKB_BLOB    |YES  |NA  |NA      |NA    |\n\n</div>\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndbSendQuery(\n  conn,\n  \"FROM (SUMMARIZE mytable) AS summarized_table WHERE NOT regexp_matches(column_name,'geom')\"\n) |>\n  dbFetch()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|column_name |column_type |min      |max     | approx_unique|avg                 |std                 |q25     |q50     |q75     | count| null_percentage|\n|:-----------|:-----------|:--------|:-------|-------------:|:-------------------|:-------------------|:-------|:-------|:-------|-----:|---------------:|\n|AREA        |DOUBLE      |0.042    |0.241   |            86|0.12626000000000004 |0.04920019298639987 |0.091   |0.1205  |0.1545  |   100|               0|\n|PERIMETER   |DOUBLE      |0.999    |3.64    |            92|1.6729600000000004  |0.4823126510193709  |1.323   |1.6085  |1.863   |   100|               0|\n|CNTY_       |DOUBLE      |1825.0   |2241.0  |           112|1985.96             |106.51664829328959  |1901.5  |1982.0  |2067.5  |   100|               0|\n|CNTY_ID     |DOUBLE      |1825.0   |2241.0  |           112|1985.96             |106.51664829328959  |1901.5  |1982.0  |2067.5  |   100|               0|\n|NAME        |VARCHAR     |Alamance |Yancey  |           105|NA                  |NA                  |NA      |NA      |NA      |   100|               0|\n|FIPS        |VARCHAR     |37001    |37199   |            83|NA                  |NA                  |NA      |NA      |NA      |   100|               0|\n|FIPSNO      |DOUBLE      |37001.0  |37199.0 |           100|37100.0             |58.022983951764346  |37050.0 |37100.0 |37150.0 |   100|               0|\n|CRESS_ID    |INTEGER     |1        |100     |            96|50.5                |29.011491975882013  |26      |50      |76      |   100|               0|\n|BIR74       |DOUBLE      |248.0    |21588.0 |           101|3299.62             |3848.1651269196336  |1063.0  |2180.5  |3957.0  |   100|               0|\n|SID74       |DOUBLE      |0.0      |44.0    |            24|6.67                |7.781167371067509   |2.0     |4.0     |8.5     |   100|               0|\n|NWBIR74     |DOUBLE      |1.0      |8027.0  |            96|1050.81             |1432.9117399353129  |180.0   |697.5   |1172.0  |   100|               0|\n|BIR79       |DOUBLE      |319.0    |30757.0 |            98|4223.92             |5179.458159095233   |1308.5  |2636.0  |4989.0  |   100|               0|\n|SID79       |DOUBLE      |0.0      |57.0    |            29|8.36                |9.431860898041274   |2.0     |5.0     |10.5    |   100|               0|\n|NWBIR79     |DOUBLE      |3.0      |11631.0 |           101|1352.81             |1975.9987511497711  |241.0   |874.5   |1416.5  |   100|               0|\n\n</div>\n:::\n:::\n\n\n\n\n\n## Reading and Converting Spatial Data\n\nHere, the code reads the spatial data from the `mytable` table, specifying the geometry column (`geom2`). The result is converted to a tibble and then to an `sf` object for spatial data manipulation.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres <- st_read(\n  conn,\n  query =\n    \"\n      SELECT\n        *\n      FROM\n       mytable;\n    \",\n  geometry_column = \"geom2\"\n) |>\n  st_as_sf() |>\n  select(-geom) |>\n  head()\n```\n:::\n\n\n\n\n\n## Filtering and Plotting Spatial Data\n\nFilter the spatial data based on intersection with a specific point.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl(conn, \"mytable\") |>\n  filter(ST_Intersects(geom, \"SRID=4326;POINT (-81.5 36.43)\")) |>\n  select(-contains(\"geom\"))\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|  AREA| PERIMETER| CNTY_| CNTY_ID|NAME |FIPS  | FIPSNO| CRESS_ID| BIR74| SID74| NWBIR74| BIR79| SID79| NWBIR79|\n|-----:|---------:|-----:|-------:|:----|:-----|------:|--------:|-----:|-----:|-------:|-----:|-----:|-------:|\n| 0.114|     1.442|  1825|    1825|Ashe |37009 |  37009|        5|  1091|     1|      10|  1364|     0|      19|\n\n</div>\n:::\n:::\n\n\n\n\n\n## Filter by Area and Plot\n\nFilter the spatial data based on area greater than 0.14 and plot the results.\n\n\n\n\n\n::: {.cell crop='true'}\n\n```{.r .cell-code}\nres <- tbl(conn, \"mytable\") |>\n  filter(ST_Area(geom) > 0.14) |>\n  collect() |>\n  st_as_sf()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nwkbType: 67108864\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(st_geometry(res), lwd = 0.5)\n```\n\n::: {.cell-output-display}\n![](02_database_files/figure-html/unnamed-chunk-9-1.png)\n:::\n:::\n",
    "supporting": [
      "02_database_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}