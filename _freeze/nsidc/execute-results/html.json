{
  "hash": "ba0b84fbf6d710ff3c67235ea8f12730",
  "result": {
    "engine": "knitr",
    "markdown": "# NSIDC binary data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(terra)\n```\n:::\n\n\n\n\n## Binary data\n\nBinary data is a format where information is stored in a sequence of bytes, representing data in its most basic form without any text-based structure. This format is efficient for storage and quick to read programmatically, but it's not human-readable without proper interpretation. In the case of scientific datasets like sea ice concentration, binary formats were often used to minimize file size and optimize data processing speed.\n\n::: {.callout-note}\n\nVersion 1 of the [NSIDC-0081 sea ice concentration dataset](https://nsidc.org/data/nsidc-0081/versions/1) is available in binary format but is no longer active. [The current version (Version 2)](https://nsidc.org/data/nsidc-0081/versions/2) is in NetCDF format.\n\n:::\n\nBased on the [documentation](https://nsidc.org/sites/default/files/nsidc-0081-v001-userguide_1.pdf), the binary files can be read using the following code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsic <- readBin(fs::path(\"data\", \"nsidc\", \"nt_20171002_f17_v1.1_n.bin\"),\n  what = \"integer\",\n  n = 304L * 448L,\n  size = 1L,\n  signed = FALSE\n)\n\n\nlat <-\n  readBin(\n    fs::path(\"data\", \"nsidc\", \"psn25lats_v3.dat\"),\n    what = \"integer\",\n    n = 304L * 448L,\n    size = 4L,\n    signed = TRUE\n  )\n\nlon <-\n  readBin(\n    fs::path(\"data\", \"nsidc\", \"psn25lons_v3.dat\"),\n    what = \"integer\",\n    n = 304L * 448L,\n    size = 4L,\n    signed = TRUE\n  )\n```\n:::\n\n\n\n\nWe can construct a data frame from the latitude, longitude, and sea ice concentration data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(lat = lat / 100000L, lon = lon / 100000L, sic = sic)\n\nhead(df)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|      lat|      lon| sic|\n|--------:|--------:|---:|\n| 31.10267| 168.3204|  48|\n| 31.19941| 168.1488|  48|\n| 31.29580| 167.9764|  50|\n| 31.39183| 167.8034|  53|\n| 31.48750| 167.6297|  53|\n| 31.58280| 167.4553|   0|\n\n</div>\n:::\n\n```{.r .cell-code}\nrange(df[[\"sic\"]], na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]   0 254\n```\n\n\n:::\n:::\n\n\n\n\nAccording to the documentation:\n\n> The sea ice concentration floating-point values (fractional coverage ranging from 0.0 to 1.0) are\n> multiplied by a scaling factor of 250. To convert to the fractional range of 0.0 to 1.0, divide the\n> scaled data in the file by 250.\n\n| Data Value | Description                                                                                                                                      |\n| ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |\n| 0 - 250    | Sea ice concentration (fractional coverage scaled by 250)                                                                                        |\n| 251        | Circular mask used in the Arctic to cover the irregularly-shaped data gap around the pole (caused by the orbit inclination and instrument swath) |\n| 252        | Unused                                                                                                                                           |\n| 253        | Coast                                                                                                                                            |\n| 254        | Land                                                                                                                                             |\n| 255        | Missing data                                                                                                                                     |\n\n### Turning the data into a raster\n\nWe can turn the data into a raster object using the `terra` package. The sea ice concentration values are stored in a 448x304 matrix, which we can convert to a raster object.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsic_matrix <- matrix(sic, nrow = 448L, ncol = 304L, byrow = TRUE)\n\nr <- rast(sic_matrix)\n\nplot(r)\n```\n\n::: {.cell-output-display}\n![](nsidc_files/figure-html/unnamed-chunk-4-1.svg)\n:::\n\n```{.r .cell-code}\next(r) <- c(-3850000L, 3750000L, -5350000L, 5850000L)\ncrs(r) <- \"+proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\"\n\nplot(r)\n```\n\n::: {.cell-output-display}\n![](nsidc_files/figure-html/unnamed-chunk-4-2.svg)\n:::\n:::\n",
    "supporting": [
      "nsidc_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}